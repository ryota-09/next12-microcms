/* eslint-disable jsx-a11y/alt-text */
import Head from "next/head";
import { getTableById, getTableList } from "@/lib/microcms";

import { GetServerSideProps, NextPage } from "next";
import {
  BaseMicroCMSApiSingleDataType,
  SateiPageContentType,
  TableOfContentsType,
} from "@/types";

import parser from "html-react-parser";
import { RichEditorFactory } from "@/components/RichEditorUiParts/RichEditorFactory";
import Image from "next/image";
import { useState } from "react";
import { isDOMElement } from "@/utils/typeGurd";

type PropsType = {
  data: BaseMicroCMSApiSingleDataType<SateiPageContentType>;
  tableOfContents: TableOfContentsType[];
  directory: string;
};

const Home: NextPage<PropsType> = ({ data, tableOfContents, directory }) => {
  const [isOpen, setIsOpen] = useState(false);
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="max-w-[1024px] mx-auto mt-[100px]">
        <h1>タイトル: {data.title}</h1>
        <h2 className="text-[40px]">更新日: {data.updatedAt}</h2>
        <hr />
        <button
          onClick={() => setIsOpen(!isOpen)}
          className="flex justify-between items-center py-2 px-4 w-full text-left relative"
        >
          タイトル
          <div
            className={`after:content-[""] after:w-0 after:h-0 after:border-l-[12px] after:border-r-[12px] after:border-t-[12px] after:border-transparent after:border-t-blue-500 after:inline-block after:transform-origin-center transform transition-transform duration-200 ${
              isOpen ? "-rotate-180" : ""
            }`}
          ></div>
        </button>
        <hr />
        <div>
          <div>目次:</div>
          <div>
            {tableOfContents.map((tableElement) => (
              <a
                className="block"
                key={tableElement.id}
                href={`#${tableElement.id}`}
              >
                {tableElement.label}
              </a>
            ))}
          </div>
        </div>
        <hr />
        {data.repeatTable &&
          data.repeatTable.map((content, index) => (
            <div key={index}>
              <b>repeatTableエリア</b>
              <div>{parser(content.table)}</div>
            </div>
          ))}
        <hr />
        {data.newedhitor && (
          <RichEditorFactory directory={directory} html={data.newedhitor} />
        )}
        <hr />
        {data.repeatTable2 &&
          data.repeatTable2.map((content, index) => (
            <div key={index}>
              <b>repeatTable2のエリア</b>
              {"title" in content && (
                <div>
                  <div>画像とタイトルのエリア</div>
                  <div>{content.title}</div>
                  <div>
                    <Image
                      src={content.image.url}
                      width={content.image.width}
                      height={content.image.height}
                    />
                  </div>
                </div>
              )}
              {"richeditor" in content && (
                <div>
                  <div>画像とタイトルのエリア</div>
                  <RichEditorFactory
                    html={content.richeditor}
                    directory={directory}
                  />
                </div>
              )}
            </div>
          ))}
      </main>
    </>
  );
};
export default Home;

export const getServerSideProps: GetServerSideProps = async () => {
  const data = await getTableById("ik9hciusz");

  // 目次の生成
  const tocArray: TableOfContentsType[] = [];
  for (const obj of data.repeatTable2) {
    if (obj.fieldId === "richeditor") {
      parser(obj.richeditor, {
        replace: (domNode) => {
          if (
            isDOMElement(domNode) &&
            domNode.name === "h3" &&
            "data" in domNode.children[0]
          ) {
            // NOTE: childrenのサイズが2以上になるのはh3タグの中に複数のタグが入る場合らしい。
            if (domNode.children.length !== 1) {
              console.log("1以外", domNode.children);
            }
            tocArray.push({
              id: domNode.attribs.id,
              label: domNode.children[0].data,
              domName: "h3",
            });
          }
          return;
        },
      });
    }
  }

  return { props: { data, tableOfContents: tocArray, directory: "satei" } };
};
