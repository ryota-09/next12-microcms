import { GetStaticPaths, GetStaticProps, NextPageContext } from "next";
import Head from "next/head";

export default function Satei({ isPreviewMode, content, targetDirectory }) {
  if (!content) {
    return <p>エラーページ</p>;
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <h1>SSGファクトリー</h1>
        <div>{JSON.stringify(`isPreviewMode: ${isPreviewMode}`)}</div>
        <div>{isPreviewMode ? "プレビューモード" : "Nonプレビュー"}</div>
        <div>{JSON.stringify(targetDirectory)}</div>
        <div>{JSON.stringify(content)}</div>
      </main>
    </>
  );
}

export const getStaticProps: GetStaticProps = async (context) => {
  const isPreviewMode = context.preview;
  if (!isPreviewMode) return { notFound: true };
  const contentId = context.params?.id;
  const draftKey = context.previewData?.draftKey;
  const targetDirectory = context.previewData?.directory;
  const content = await fetch(
    `https://${
      process.env.NEXT_PUBLIC_MICROCMS_SERVICE_DOMAIN
    }.microcms.io/api/v1/tables/${contentId}/${
      draftKey !== undefined ? `?draftKey=${draftKey}` : ""
    }`,
    {
      headers: {
        "X-MICROCMS-API-KEY": process.env.NEXT_PUBLIC_MICROCMS_API_KEY || "",
      },
    }
  ).then((res) => res.json());

  return {
    props: {
      isPreviewMode,
      targetDirectory,
      content,
    },
  };
};

export const getStaticPaths: GetStaticPaths = async (req) => {
  let paramList = [];
  const contents = await fetch(
    `https://${process.env.NEXT_PUBLIC_MICROCMS_SERVICE_DOMAIN}.microcms.io/api/v1/tables`,
    {
      headers: {
        "X-MICROCMS-API-KEY": process.env.NEXT_PUBLIC_MICROCMS_API_KEY || "",
      },
    }
  ).then((res) => res.json());

  for (const item of contents.contents) {
    paramList.push({
      params: {
        id: item.id,
      },
    });
  }

  return {
    paths: [...paramList],
    fallback: false,
  };
};
